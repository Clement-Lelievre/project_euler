"""https://projecteuler.net/problem=29
How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?"""

# given the large numbers we can get (up to 100^100), I won't calculate the powers, I'll just store tuples of ints stemming
# from the prime factorization
# given the relatively low number of possibiities, I'll just iterate through all possibilities for a and b
# I recently read here (https://fivethirtyeight.com/features/can-you-rescue-your-crew/ see "Solution to the last Riddler Express")
# that if a^b = b^a with a and b integers and distinct, the only possibility is 2 and 4. But this won't solve this puzzle.

# this can be brute-forced but where's the fun?

prime_facto = {}  # memoize results (yeah with a global var, shamelessly)


def prime_factorization(n: int) -> tuple[tuple[int, int]]:
    """Returns a list of tuples of the form (prime factor, exponent) for n"""
    if n in prime_facto:
        return prime_facto[n]
    prime_factors = []
    i = 2
    n_original = n
    while i <= n:
        if n % i == 0:
            prime_factors.append((i, 0))
            while n % i == 0:
                prime_factors[-1] = (i, prime_factors[-1][1] + 1)
                n /= i
        i += 1
    ans = tuple(prime_factors)
    prime_facto[n_original] = ans
    return ans


def solve() -> None:
    seen = set()
    for a in range(2, 101):
        for b in range(2, 101):
            # process a^b
            a_prime_facto = prime_factorization(a)
            a_power_b_prime_facto = tuple(
                (base, power * b) for (base, power) in a_prime_facto
            )
            seen.add(a_power_b_prime_facto)
    print(len(seen))


if __name__ == "__main__":
    solve()
